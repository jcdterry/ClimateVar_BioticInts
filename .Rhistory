height= 700, width= 700 , d3_version = 5,
dependencies ="vizjs.js")
bipartite_D3<- function(data,
filename='bipartiteD3Script',
PrimaryLab = 'Primary',
SecondaryLab='Secondary',
SiteNames=NULL,
colouroption=c('monochrome', 'brewer', 'manual')[1],
HighlightLab = 'Unlinked',
HighlightCol = '#3366CC',
monoChromeCol = 'rgb(56,43,61)',
ColourBy = c(1, 2)[2],
BrewerPalette = 'Accent',
NamedColourVector,
MainFigSize = NULL,
SortPrimary=NULL,
SortSecondary=NULL,
mp = c(1,1),
MinWidth=10,
Pad=1,
IndivFigSize= c(200, 400),
BarSize = 35,
Orientation = c('vertical', 'horizontal')[1],
EdgeMode = c('straight','smooth' )[2],
BoxLabPos = NULL,
IncludePerc = TRUE,
PercentageDecimals =0,
PercPos = NULL,
CSS_Output_Supress = FALSE,
PRINT=FALSE){
df<-NULL
if(tibble::is_tibble(data)){
data<- as.data.frame(data)
}
if(is.data.frame(data)){
df<- data
}else{
if(is.list(data)){
df<-List2DF(data, PrimaryLab,SecondaryLab,SiteNames)
}else{
dimensions<-length(dim(data))
if(dimensions ==3){
df<-Array2DF(data, PrimaryLab,SecondaryLab,SiteNames)
}
if(dimensions==2){
df<-Matrix2DF(data,PrimaryLab,SecondaryLab, SiteNames)
}
}
}
if(is.null(df)){#
stop('invalid data input. Valid forms are data frame, bipartite style matrix, list or array')
}
if((mp[2]*mp[1])> (ncol(df)-2)){
warning('Making too many facets. Are you sure mp is set ok?')
}
if((mp[2]*mp[1])< (ncol(df)-2)){
warning('Making too few facets. Guessing you want 1 row')
mp[2]<-ncol(df)-2
}
if(is.null( MainFigSize)){
MainFigSize<-c(mp[2]*700, mp[1]*700) # Having a reasonable guess at a default overall figure size
}
BP_JS_Writer(df = df,filename = filename,
colouroption = colouroption,
HighlightLab = HighlightLab,
HighlightCol = HighlightCol,
monoChromeCol = monoChromeCol,
ColourBy = ColourBy,
BrewerPalette = BrewerPalette,
NamedColourVector = NamedColourVector,
MainFigSize = MainFigSize ,
SortPrimary = SortPrimary,
SortSecondary = SortSecondary,
mp = mp,
MinWidth = MinWidth,
Pad = Pad,
IndivFigSize = IndivFigSize,
BarSize = BarSize ,
Orientation = Orientation,
EdgeMode = EdgeMode,
AxisLabels= c(PrimaryLab, SecondaryLab),
FigureLabel = SiteNames,
BoxLabPos = BoxLabPos,
IncludePerc = IncludePerc ,
PercentageDecimals = PercentageDecimals,
PercPos = PercPos,
CSS_Output_Supress = CSS_Output_Supress ,
PRINT =  PRINT)
LoadVisJS()
r2d3::r2d3(data = NA, script = paste0(filename,".js"),
height= MainFigSize[2], width= MainFigSize[1] ,d3_version = '6',
dependencies ="vizjs.js")
}
# If nothing appears then either update RStudio to version 1.2 or open in a modern web browser
bipartite_D3(SmallTestWeb)
#'\dontrun{  testdata <- data.frame(higher = c("bee1","bee1","bee1","bee2","bee1","bee3"),
#' lower = c("plant1","plant2","plant1","plant2","plant3","plant4"),
#' webID = c("meadow","meadow","meadow","meadow","meadow","meadow"), freq=c(5,9,1,2,3,7))
#' SmallTestWeb <- bipartite::frame2webs(testdata,type.out="array")
#'
#'
#' bipartite_D3(SmallTestWeb, filename = 'demo1')
#'}
#'## For more examples see vignette
#' @export
bipartite_D3<- function(data,
filename='bipartiteD3Script',
PrimaryLab = 'Primary',
SecondaryLab='Secondary',
SiteNames=NULL,
colouroption=c('monochrome', 'brewer', 'manual')[1],
HighlightLab = 'Unlinked',
HighlightCol = '#3366CC',
monoChromeCol = 'rgb(56,43,61)',
ColourBy = c(1, 2)[2],
BrewerPalette = 'Accent',
NamedColourVector,
MainFigSize = NULL,
SortPrimary=NULL,
SortSecondary=NULL,
mp = c(1,1),
MinWidth=10,
Pad=1,
IndivFigSize= c(200, 400),
BarSize = 35,
Orientation = c('vertical', 'horizontal')[1],
EdgeMode = c('straight','smooth' )[2],
BoxLabPos = NULL,
IncludePerc = TRUE,
PercentageDecimals =0,
PercPos = NULL,
CSS_Output_Supress = FALSE,
PRINT=FALSE){
df<-NULL
if(tibble::is_tibble(data)){
data<- as.data.frame(data)
}
if(is.data.frame(data)){
df<- data
}else{
if(is.list(data)){
df<-List2DF(data, PrimaryLab,SecondaryLab,SiteNames)
}else{
dimensions<-length(dim(data))
if(dimensions ==3){
df<-Array2DF(data, PrimaryLab,SecondaryLab,SiteNames)
}
if(dimensions==2){
df<-Matrix2DF(data,PrimaryLab,SecondaryLab, SiteNames)
}
}
}
if(is.null(df)){#
stop('invalid data input. Valid forms are data frame, bipartite style matrix, list or array')
}
if((mp[2]*mp[1])> (ncol(df)-2)){
warning('Making too many facets. Are you sure mp is set ok?')
}
if((mp[2]*mp[1])< (ncol(df)-2)){
warning('Making too few facets. Guessing you want 1 row')
mp[2]<-ncol(df)-2
}
if(is.null( MainFigSize)){
MainFigSize<-c(mp[2]*700, mp[1]*700) # Having a reasonable guess at a default overall figure size
}
BP_JS_Writer(df = df,filename = filename,
colouroption = colouroption,
HighlightLab = HighlightLab,
HighlightCol = HighlightCol,
monoChromeCol = monoChromeCol,
ColourBy = ColourBy,
BrewerPalette = BrewerPalette,
NamedColourVector = NamedColourVector,
MainFigSize = MainFigSize ,
SortPrimary = SortPrimary,
SortSecondary = SortSecondary,
mp = mp,
MinWidth = MinWidth,
Pad = Pad,
IndivFigSize = IndivFigSize,
BarSize = BarSize ,
Orientation = Orientation,
EdgeMode = EdgeMode,
AxisLabels= c(PrimaryLab, SecondaryLab),
FigureLabel = SiteNames,
BoxLabPos = BoxLabPos,
IncludePerc = IncludePerc ,
PercentageDecimals = PercentageDecimals,
PercPos = PercPos,
CSS_Output_Supress = CSS_Output_Supress ,
PRINT =  PRINT)
LoadVisJS()
r2d3::r2d3(data = NA, script = paste0(filename,".js"),
height= MainFigSize[2], width= MainFigSize[1] ,d3_version = '5',
dependencies ="vizjs.js")
}
# If nothing appears then either update RStudio to version 1.2 or open in a modern web browser
bipartite_D3(SmallTestWeb)
install.packages("bipartiteD3")
library(tidyverse)
data.frame( dates = 2014:2021)%>%
ggplot( aes( x = dates))
data.frame( dates = 2014:2021)%>%
ggplot( aes( x = dates))+
scale_x_date()
data.frame( dates = 2014:2021)%>%
ggplot( aes( x = as.Date(dates)))+
scale_x_date()
library(lubridate)
scale_x_date()
data.frame( dates = ym( paste( 2014:2021, 1)))%>%
ggplot( aes( x = (dates)))+
scale_x_date()
data.frame( dates = ym( paste( 2014:2021, 1)))%>%
ggplot( aes( x = dates))+
scale_x_date()
data.frame( dates = ym( paste( 2014:2021, 1)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months')
data.frame( dates = ym( paste( 2014:2021, 9)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months', )
data.frame( dates = ym( paste( 2014:2021, 9)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months', expand = 0)
data.frame( dates = ym( paste( 2014:2021, 9)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months', expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 8)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 7)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 10)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 10)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
date_breaks = '1 year',
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 10)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
date_breaks = '1 year', date_labels = '%b %y'
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 10)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
date_breaks = '1 year', date_labels = '%b %y',
expand = c(0,0))
data.frame( dates = ym( paste( 2014:2021, 10)))%>%
ggplot( aes( x = dates))+
scale_x_date(date_minor_breaks = '3 months',
date_breaks = '3 month', date_labels = '%b %y',
expand = c(0,0))
install.packages("cassandRa")
library(cassandRa)
make_true_and_sample_web
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.1)
demoweb<- FitAllModels(demoweb)
PlotFit(demoweb, 'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb, 'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
library(ggplot2)
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb, 'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.9)
demoweb<- FitMatching(demoweb)
PlotFit(demoweb, 'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb)
PlotFit(demoweb, 'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb
PlotFit(demoweb,Matrix_to_plot =  NULL, OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb$TrueWeb
demoweb$TrueWeb %>% image
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.3, SampleObs = 800, traitvsnested = 0.5,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb)
gc()
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb
make_true_and_sample_web
makeweb
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.5, SampleObs = 800, traitvsnested = 0.5,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb)
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 25,n_wasps =  25,
TargetTrueConn = 0.5, SampleObs = 800, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb)
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 15,n_wasps =  25,
TargetTrueConn = 0.5, SampleObs = 800, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb,N_runs = 50 )
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model')+ THEME
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait', title = 'b) Latent-Trait Model', RemoveTP = TRUE)+ THEME
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', RemoveTP = TRUE)+ THEME
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 15,n_wasps =  25,
TargetTrueConn = 0.5, SampleObs = 300, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb,N_runs = 50 )
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', RemoveTP = )+ THEME
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', RemoveTP = TRUE )+ THEME
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', addDots = 'Size',RemoveTP = TRUE )+ THEME
select
library(dplyr)
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', addDots = 'Size',RemoveTP = TRUE )+ THEME
library(tidyverse)
PlotFit
mpleObs = 100, traitvsnested = 0.9,
hosttrait_n = 'single')
mpleObs = 100, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<-make_true_and_sample_web(seed = 4,specpar =  2, n_hosts = 15,n_wasps =  25,
TargetTrueConn = 0.5, SampleObs = 100, traitvsnested = 0.9,
hosttrait_n = 'single')
demoweb<- FitMatching(demoweb,N_runs = 50 )
THEME <- theme(plot.title = element_text( color = 'black',
face = 'plain',
size = 12,
hjust = 0),
axis.text.y   = element_blank(),
axis.text.x = element_blank())
PlotFit(demoweb,Matrix_to_plot =  'M', OrderBy = 'LatentTrait',
title = 'b) Latent-Trait Model', addDots = 'Size',RemoveTP = TRUE )+ THEME
## environmental performance curve defined by gamma function
SHAPE = 3
SCALE = 1.5
PEAK  = SCALE*(SHAPE -1)
Center_1 <- 10
Center_2 <- 0.6
Test1 <- data.frame( E = rnorm(1000, Center_2, sd = 1.5) )
Test2 <- data.frame( E = rnorm(1000, Center_1, sd = 1.5) )
EPC_fig2 <- Vectorize(function( E){
if( E> PEAK){
Performance<-dgamma(x =PEAK+(E-PEAK)^0.75,  shape = SHAPE, scale = SCALE)
}else{
if(  E < PEAK-2){
Performance<-      dgamma(x =E+2,  shape = SHAPE, scale = SCALE)
}else{
Performance <-   dgamma(x =PEAK,  shape = SHAPE, scale = SCALE)
}
}
return(Performance)
})
setwd("~/GitHub/ClimateVar_BioticInts")
Center_1 <- 10
Center_2 <- 0.4
Test1 <- data.frame( E = rnorm(1000, Center_1, sd = 1.5) )
Test2 <- data.frame( E = rnorm(1000, Center_2, sd = 1) )
# Take 2
data.frame( E = seq(-2, 15, l=1000)) %>%
mutate(Performance =  (EPC_fig2(E))) %>%
mutate( Weather1= dnorm( E, mean = Center_1, sd = 1.5)/5,
Weather2= dnorm( E, mean = Center_2, sd = 1)/5)%>%
ggplot( aes( x = E))+
geom_line(aes( y = Performance ))+
theme_classic()+
theme(axis.text = element_blank()  )+
xlab( 'Envrionment')+
geom_vline( xintercept = Center_1, col = 'orange')+
geom_vline( xintercept = Center_2, col = 'darkblue')+
geom_line( aes(y = Weather1), col = 'orange', linetype = 'dotted')+
geom_line( aes(y = Weather2), col = 'darkblue', linetype = 'dotted')+
scale_x_reverse()+
scale_y_continuous(limits = c(0.001,0.2))-> EPCPlot
Performances<-data.frame( A = EPC_fig2(Test1$E),
B = EPC_fig2(Test2$E)) %>%
gather( 'Test', 'Performance')
Performances %>%
group_by(Test)%>%
summarise( Mean = mean(Performance)) -> Means
Means$Orig= EPC_fig2(c(Center_1,Center_2))
Means%>%
gather('key', 'value',  -Test)-> LineValuesMeans
Performances%>%
ggplot( aes( Performance, fill = Test))+
geom_histogram()+
theme_classic()+
geom_vline(data = LineValuesMeans, aes(xintercept = value,linetype = key), show.legend = FALSE)+
scale_fill_manual(values =  c(  'orange','darkblue'))+
guides(sol = FALSE)+
ylab( 'Frequency')+
xlab( 'Performance')+
guides(fill = FALSE)+
geom_hline(aes(yintercept = 1, linetype = 'solid'), alpha = 0) +
scale_linetype(name = '',
limits= c('Orig', 'Mean'),
labels = c('Value under\nmean conditions',
'Long-term\naverage value' ),
guide = guide_legend(override.aes = list(alpha = 1, size = 0.5 )))+
facet_wrap(~Test)+
theme(axis.text = element_blank(), strip.text = element_blank())+
#theme(legend.position="top", legend.box = "horizontal", )+
coord_flip(xlim = c(0.001,0.2))-> ReponseHist
Fig2<-cowplot::plot_grid( EPCPlot,ReponseHist, rel_widths = c(1,1), labels = 'auto' )
# Fig2
ggsave('MS_Figures/Figure2.png', height = 3, width = 7, dpi = 600)
ggsave('MS_Figures/Figure2.pdf', height = 3, width = 7, dpi = 600)
library(MASS)
library(tidyverse)
library(knitr)
library(cowplot)
set.seed(1)
Center_1 <- 10
Center_2 <- 0.4
Test1 <- data.frame( E = rnorm(1000, Center_1, sd = 1.5) )
Test2 <- data.frame( E = rnorm(1000, Center_2, sd = 1) )
# Take 2
data.frame( E = seq(-2, 15, l=1000)) %>%
mutate(Performance =  (EPC_fig2(E))) %>%
mutate( Weather1= dnorm( E, mean = Center_1, sd = 1.5)/5,
Weather2= dnorm( E, mean = Center_2, sd = 1)/5)%>%
ggplot( aes( x = E))+
geom_line(aes( y = Performance ))+
theme_classic()+
theme(axis.text = element_blank()  )+
xlab( 'Envrionment')+
geom_vline( xintercept = Center_1, col = 'orange')+
geom_vline( xintercept = Center_2, col = 'darkblue')+
geom_line( aes(y = Weather1), col = 'orange', linetype = 'dotted')+
geom_line( aes(y = Weather2), col = 'darkblue', linetype = 'dotted')+
scale_x_reverse()+
scale_y_continuous(limits = c(0.001,0.2))-> EPCPlot
Performances<-data.frame( A = EPC_fig2(Test1$E),
B = EPC_fig2(Test2$E)) %>%
gather( 'Test', 'Performance')
Performances %>%
group_by(Test)%>%
summarise( Mean = mean(Performance)) -> Means
Means$Orig= EPC_fig2(c(Center_1,Center_2))
Means%>%
gather('key', 'value',  -Test)-> LineValuesMeans
Performances%>%
ggplot( aes( Performance, fill = Test))+
geom_histogram()+
theme_classic()+
geom_vline(data = LineValuesMeans, aes(xintercept = value,linetype = key), show.legend = FALSE)+
scale_fill_manual(values =  c(  'orange','darkblue'))+
guides(sol = FALSE)+
ylab( 'Frequency')+
xlab( 'Performance')+
guides(fill = FALSE)+
geom_hline(aes(yintercept = 1, linetype = 'solid'), alpha = 0) +
scale_linetype(name = '',
limits= c('Orig', 'Mean'),
labels = c('Value under\nmean conditions',
'Long-term\naverage value' ),
guide = guide_legend(override.aes = list(alpha = 1, size = 0.5 )))+
facet_wrap(~Test)+
theme(axis.text = element_blank(), strip.text = element_blank())+
#theme(legend.position="top", legend.box = "horizontal", )+
coord_flip(xlim = c(0.001,0.2))-> ReponseHist
Fig2<-cowplot::plot_grid( EPCPlot,ReponseHist, rel_widths = c(1,1), labels = 'auto' )
# Fig2
ggsave('MS_Figures/Figure2.png', height = 3, width = 7, dpi = 600)
ggsave('MS_Figures/Figure2.pdf', height = 3, width = 7, dpi = 600)
